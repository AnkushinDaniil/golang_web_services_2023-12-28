Total: 5.99s
ROUTINE ======================== hw3.SlowSearch in /Users/daniilankusin/golang_web_services_2023-12-28/3/99_hw/common.go
         0      3.62s (flat, cum) 60.43% of Total
         .          .     16:func SlowSearch(out io.Writer) {
         .          .     17:	file, err := os.Open(filePath)
         .          .     18:	if err != nil {
         .          .     19:		panic(err)
         .          .     20:	}
         .          .     21:
         .       10ms     22:	fileContents, err := ioutil.ReadAll(file)
         .          .     23:	if err != nil {
         .          .     24:		panic(err)
         .          .     25:	}
         .          .     26:
         .          .     27:	r := regexp.MustCompile("@")
         .          .     28:	seenBrowsers := []string{}
         .          .     29:	uniqueBrowsers := 0
         .          .     30:	foundUsers := ""
         .          .     31:
         .          .     32:	lines := strings.Split(string(fileContents), "\n")
         .          .     33:
         .          .     34:	users := make([]map[string]interface{}, 0)
         .          .     35:	for _, line := range lines {
         .       60ms     36:		user := make(map[string]interface{})
         .          .     37:		// fmt.Printf("%v %v\n", err, line)
         .      820ms     38:		err := json.Unmarshal([]byte(line), &user)
         .          .     39:		if err != nil {
         .          .     40:			panic(err)
         .          .     41:		}
         .          .     42:		users = append(users, user)
         .          .     43:	}
         .          .     44:
         .          .     45:	for i, user := range users {
         .          .     46:
         .          .     47:		isAndroid := false
         .          .     48:		isMSIE := false
         .          .     49:
         .       10ms     50:		browsers, ok := user["browsers"].([]interface{})
         .          .     51:		if !ok {
         .          .     52:			// log.Println("cant cast browsers")
         .          .     53:			continue
         .          .     54:		}
         .          .     55:
         .          .     56:		for _, browserRaw := range browsers {
         .          .     57:			browser, ok := browserRaw.(string)
         .          .     58:			if !ok {
         .          .     59:				// log.Println("cant cast browser to string")
         .          .     60:				continue
         .          .     61:			}
         .      1.42s     62:			if ok, err := regexp.MatchString("Android", browser); ok && err == nil {
         .          .     63:				isAndroid = true
         .          .     64:				notSeenBefore := true
         .          .     65:				for _, item := range seenBrowsers {
         .          .     66:					if item == browser {
         .          .     67:						notSeenBefore = false
         .          .     68:					}
         .          .     69:				}
         .          .     70:				if notSeenBefore {
         .          .     71:					// log.Printf("SLOW New browser: %s, first seen: %s", browser, user["name"])
         .          .     72:					seenBrowsers = append(seenBrowsers, browser)
         .          .     73:					uniqueBrowsers++
         .          .     74:				}
         .          .     75:			}
         .          .     76:		}
         .          .     77:
         .          .     78:		for _, browserRaw := range browsers {
         .          .     79:			browser, ok := browserRaw.(string)
         .          .     80:			if !ok {
         .          .     81:				// log.Println("cant cast browser to string")
         .          .     82:				continue
         .          .     83:			}
         .      1.27s     84:			if ok, err := regexp.MatchString("MSIE", browser); ok && err == nil {
         .          .     85:				isMSIE = true
         .          .     86:				notSeenBefore := true
         .          .     87:				for _, item := range seenBrowsers {
         .          .     88:					if item == browser {
         .          .     89:						notSeenBefore = false
         .          .     90:					}
         .          .     91:				}
         .          .     92:				if notSeenBefore {
         .          .     93:					// log.Printf("SLOW New browser: %s, first seen: %s", browser, user["name"])
         .          .     94:					seenBrowsers = append(seenBrowsers, browser)
         .          .     95:					uniqueBrowsers++
         .          .     96:				}
         .          .     97:			}
         .          .     98:		}
         .          .     99:
         .          .    100:		if !(isAndroid && isMSIE) {
         .          .    101:			continue
         .          .    102:		}
         .          .    103:
         .          .    104:		// log.Println("Android and MSIE user:", user["name"], user["email"])
         .       10ms    105:		email := r.ReplaceAllString(user["email"].(string), " [at] ")
         .       20ms    106:		foundUsers += fmt.Sprintf("[%d] %s <%s>\n", i, user["name"], email)
         .          .    107:	}
         .          .    108:
         .          .    109:	fmt.Fprintln(out, "found users:\n"+foundUsers)
         .          .    110:	fmt.Fprintln(out, "Total unique browsers", len(seenBrowsers))
         .          .    111:}